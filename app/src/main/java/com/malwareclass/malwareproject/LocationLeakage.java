package com.malwareclass.malwareproject;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationManager;
import android.util.Log;

import java.io.IOException;
import java.util.List;


public class LocationLeakage extends BroadcastReceiver {

    private static final String TAG = "LOCATION";
    private double altitude = 0.0;
    private double longitude = 0.0;
    private double latitude = 0.0;

    @SuppressLint("MissingPermission")
    @Override
    public void onReceive(Context context, Intent intent) {
        Log.d(TAG, "Started");

        /*LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
        if(locationManager != null) {
            Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
            if(location != null) {
                latitude = location.getLatitude();
                longitude = location.getLongitude();
                altitude = location.getAltitude();
            }
        }*/
        Geocoder geocoder;
        String bestProvider;
        List<Address> user = null;
        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);

        Criteria criteria = new Criteria();
        bestProvider = lm.getBestProvider(criteria, false);
        Location location = lm.getLastKnownLocation(bestProvider);
        if(location != null){
            geocoder = new Geocoder(context);
            try {
                user = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
                longitude = (double)user.get(0).getLongitude();
                latitude = (double) user.get(0).getLatitude();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        Log.d(TAG, "latitude " + Double.toString(latitude) + " longitude " + Double.toString(longitude));
        Log.d(TAG, "Ended");
    }
}
